name: PR Kind Deployment Test

on:
  pull_request:
    branches: [main]
    paths:
      - 'kagenti/**'
      - 'deployments/ui/**'
      - '.github/**'
      - 'charts/**'

jobs:
  deploy-on-kind:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build UI image
        run: |
          docker build -t ghcr.io/kagenti/kagenti/ui:pr-test kagenti/ui

      - name: Build UI OAuth Secret image
        run: |
          docker build -t ghcr.io/kagenti/kagenti/ui-oauth-secret:pr-test kagenti/auth/ui-oauth-secret

      - name: Build Client Registration image
        run: |
          docker build -t ghcr.io/kagenti/kagenti/client-registration:latest kagenti/auth/client-registration

      - name: Set up environment file
        working-directory: kagenti/installer/app
        run: |
          cp .env_template .env
          echo "GITHUB_USER=fake" >> .env
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> .env
          echo "OPENAI_API_KEY=fake" >> .env
          echo "AGENT_NAMESPACES=team1,team2" >> .env

      - name: Run kagenti-installer to build the cluster
        working-directory: kagenti/installer
        run: |
          uv run kagenti-installer --silent --skip-install tekton --skip-install operator --skip-install addons --skip-install ui --skip-install gateway --skip-install spire --skip-install mcp_gateway --skip-install keycloak --skip-install agents --skip-install metrics_server --skip-install inspector --skip-install cert_manager --skip-install toolhive --skip-install istio

      - name: Load images into Kind cluster
        run: |
          kind load docker-image ghcr.io/kagenti/kagenti/ui:pr-test --name agent-platform
          kind load docker-image ghcr.io/kagenti/kagenti/ui-oauth-secret:pr-test --name agent-platform
          kind load docker-image ghcr.io/kagenti/kagenti/client-registration:latest --name agent-platform

      - name: Patch deployment files to use pr-test images
        run: |
          # Patch UI deployment to use pr-test tag
          sed -i 's|ghcr.io/kagenti/kagenti/ui:latest|ghcr.io/kagenti/kagenti/ui:pr-test|g' deployments/ui/kagenti-ui.yaml

          # Patch UI OAuth secret job to use pr-test tag
          sed -i 's|ghcr.io/kagenti/kagenti/ui-oauth-secret:latest|ghcr.io/kagenti/kagenti/ui-oauth-secret:pr-test|g' kagenti/installer/app/resources/ui-oauth-secret.yaml

      - name: Run kagenti-installer
        working-directory: kagenti/installer
        run: |
          uv run kagenti-installer --silent --use-existing-cluster

      - name: Apply weather-tool and weather service
        run: |
          kubectl apply -f kagenti/examples/components/

      - name: Wait for weather-tool deployment
        run: |
          timeout 120 bash -c 'until kubectl get deployment weather-tool -n team1 &> /dev/null; do sleep 2; done'
          kubectl wait --for=condition=available --timeout=300s deployment/weather-tool -n team1 || {
            kubectl get events -n team1 --sort-by='.lastTimestamp'
            exit 1
          }

      - name: Wait for weather-service deployment
        run: |
          timeout 120 bash -c 'until kubectl get deployment weather-service -n team1 &> /dev/null; do sleep 2; done'
          kubectl wait --for=condition=available --timeout=300s deployment/weather-service -n team1 || {
            kubectl get events -n team1 --sort-by='.lastTimestamp'
            exit 1
          }

      - name: Collect logs on failure
        if: always()
        run: |
          echo "=== Collecting logs for debugging ==="
          kubectl get events --all-namespaces --sort-by='.lastTimestamp'
          echo "=== Pod descriptions ==="
          kubectl describe pods --all-namespaces
          echo "=== Failed pod logs ==="
          kubectl logs --all-namespaces --selector='!job-name' --tail=100 || true